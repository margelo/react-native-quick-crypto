///
/// HybridRandomSpec.hpp
/// Tue Aug 13 2024
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/react-native-nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <NitroModules/ArrayBuffer.hpp>

namespace margelo::nitro::crypto {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Random`
   * Inherit this class to create instances of `HybridRandomSpec` in C++.
   * @example
   * ```cpp
   * class HybridRandom: public HybridRandomSpec {
   *   // ...
   * };
   * ```
   */
  class HybridRandomSpec: public HybridObject {
    public:
      // Constructor
      explicit HybridRandomSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridRandomSpec() { }

    public:
      // Properties
      

    public:
      // Methods
      virtual std::future<std::shared_ptr<ArrayBuffer>> randomFill(const std::shared_ptr<ArrayBuffer>& buffer, double offset, double size) = 0;
      virtual std::shared_ptr<ArrayBuffer> randomFillSync(const std::shared_ptr<ArrayBuffer>& buffer, double offset, double size) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Random";
  };

} // namespace margelo::nitro::crypto
