///
/// HybridHashSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `HybridHashSpec` to properly resolve imports.
namespace margelo::nitro::crypto { class HybridHashSpec; }

#include <string>
#include <optional>
#include <NitroModules/ArrayBuffer.hpp>
#include <memory>
#include "HybridHashSpec.hpp"
#include <vector>

namespace margelo::nitro::crypto {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Hash`
   * Inherit this class to create instances of `HybridHashSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridHash: public HybridHashSpec {
   * public:
   *   HybridHash(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridHashSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridHashSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridHashSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual void createHash(const std::string& algorithm, std::optional<double> outputLength) = 0;
      virtual void update(const std::shared_ptr<ArrayBuffer>& data) = 0;
      virtual std::shared_ptr<ArrayBuffer> digest(const std::optional<std::string>& encoding) = 0;
      virtual std::shared_ptr<margelo::nitro::crypto::HybridHashSpec> copy(std::optional<double> outputLength) = 0;
      virtual std::vector<std::string> getSupportedHashAlgorithms() = 0;
      virtual std::string getOpenSSLVersion() = 0;
      virtual std::shared_ptr<ArrayBuffer> keccak256(const std::shared_ptr<ArrayBuffer>& data) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Hash";
  };

} // namespace margelo::nitro::crypto
