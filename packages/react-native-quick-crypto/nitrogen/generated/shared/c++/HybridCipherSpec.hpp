///
/// HybridCipherSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `CipherArgs` to properly resolve imports.
namespace margelo::nitro::crypto { struct CipherArgs; }

#include <functional>
#include <NitroModules/Promise.hpp>
#include <NitroModules/ArrayBuffer.hpp>
#include "CipherArgs.hpp"
#include <optional>

namespace margelo::nitro::crypto {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Cipher`
   * Inherit this class to create instances of `HybridCipherSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridCipher: public HybridCipherSpec {
   * public:
   *   HybridCipher(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridCipherSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridCipherSpec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridCipherSpec() { }

    public:
      // Properties
      virtual std::function<std::future<std::shared_ptr<ArrayBuffer>>()> getFinal() = 0;
      virtual void setFinal(const std::function<std::future<std::shared_ptr<ArrayBuffer>>()>& final) = 0;
      virtual std::function<void()> getCopy() = 0;
      virtual void setCopy(const std::function<void()>& copy) = 0;
      virtual std::function<void(const CipherArgs& /* args */)> getSetArgs() = 0;
      virtual void setSetArgs(const std::function<void(const CipherArgs& /* args */)>& setArgs) = 0;
      virtual std::function<std::future<bool>(const std::shared_ptr<ArrayBuffer>& /* data */, std::optional<double> /* plaintextLength */)> getSetAAD() = 0;
      virtual void setSetAAD(const std::function<std::future<bool>(const std::shared_ptr<ArrayBuffer>& /* data */, std::optional<double> /* plaintextLength */)>& setAAD) = 0;
      virtual std::function<std::future<bool>(bool /* autoPad */)> getSetAutoPadding() = 0;
      virtual void setSetAutoPadding(const std::function<std::future<bool>(bool /* autoPad */)>& setAutoPadding) = 0;
      virtual std::function<std::future<bool>(const std::shared_ptr<ArrayBuffer>& /* tag */)> getSetAuthTag() = 0;
      virtual void setSetAuthTag(const std::function<std::future<bool>(const std::shared_ptr<ArrayBuffer>& /* tag */)>& setAuthTag) = 0;
      virtual std::function<std::future<std::shared_ptr<ArrayBuffer>>()> getGetAuthTag() = 0;
      virtual void setGetAuthTag(const std::function<std::future<std::shared_ptr<ArrayBuffer>>()>& getAuthTag) = 0;

    public:
      // Methods
      virtual std::shared_ptr<ArrayBuffer> update(const std::shared_ptr<ArrayBuffer>& data) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Cipher";
  };

} // namespace margelo::nitro::crypto
