///
/// HybridRsaKeyPairSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `KeyObject` to properly resolve imports.
namespace margelo::nitro::crypto { struct KeyObject; }

#include <NitroModules/Promise.hpp>
#include <NitroModules/ArrayBuffer.hpp>
#include <string>
#include "KeyObject.hpp"
#include <vector>

namespace margelo::nitro::crypto {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `RsaKeyPair`
   * Inherit this class to create instances of `HybridRsaKeyPairSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridRsaKeyPair: public HybridRsaKeyPairSpec {
   * public:
   *   HybridRsaKeyPair(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridRsaKeyPairSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridRsaKeyPairSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridRsaKeyPairSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<Promise<void>> generateKeyPair() = 0;
      virtual void generateKeyPairSync() = 0;
      virtual void setModulusLength(double modulusLength) = 0;
      virtual void setPublicExponent(const std::shared_ptr<ArrayBuffer>& publicExponent) = 0;
      virtual void setHashAlgorithm(const std::string& hashAlgorithm) = 0;
      virtual KeyObject importKey(const std::string& format, const std::shared_ptr<ArrayBuffer>& keyData, const std::string& algorithm, bool extractable, const std::vector<std::string>& keyUsages) = 0;
      virtual std::shared_ptr<ArrayBuffer> exportKey(const KeyObject& key, const std::string& format) = 0;
      virtual std::shared_ptr<ArrayBuffer> getPublicKey() = 0;
      virtual std::shared_ptr<ArrayBuffer> getPrivateKey() = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "RsaKeyPair";
  };

} // namespace margelo::nitro::crypto
